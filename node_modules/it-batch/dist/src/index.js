function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
function batch(source, size = 1) {
    size = Number(size);
    if (isAsyncIterable(source)) {
        return (async function* () {
            let things = [];
            if (size < 1) {
                size = 1;
            }
            if (size !== Math.round(size)) {
                throw new Error('Batch size must be an integer');
            }
            for await (const thing of source) {
                things.push(thing);
                while (things.length >= size) {
                    yield things.slice(0, size);
                    things = things.slice(size);
                }
            }
            while (things.length > 0) {
                yield things.slice(0, size);
                things = things.slice(size);
            }
        }());
    }
    return (function* () {
        let things = [];
        if (size < 1) {
            size = 1;
        }
        if (size !== Math.round(size)) {
            throw new Error('Batch size must be an integer');
        }
        for (const thing of source) {
            things.push(thing);
            while (things.length >= size) {
                yield things.slice(0, size);
                things = things.slice(size);
            }
        }
        while (things.length > 0) {
            yield things.slice(0, size);
            things = things.slice(size);
        }
    }());
}
export default batch;
//# sourceMappingURL=index.js.map