import type { SignatureInput } from '../types/jws-types.js';
import type { HooksWriteMessage } from '../types/hooks-types.js';
import { Message } from '../core/message.js';
/**
 * Input to `HookssWrite.create()`.
 */
export type HooksWriteOptions = {
    messageTimestamp?: string;
    /**
     * leave as `undefined` for customer handler.
     * ie. DWN processing will use `undefined` check to attempt to invoke the registered handler.
     */
    uri?: string;
    filter: {
        method: string;
    };
    authorizationSignatureInput: SignatureInput;
};
/**
 * Class that provides `HooksWrite` related operations.
 */
export declare class HooksWrite extends Message<HooksWriteMessage> {
    /**
     * Creates a HooksWrite message
     */
    static create(options: HooksWriteOptions): Promise<HooksWrite>;
}
//# sourceMappingURL=hooks-write.d.ts.map